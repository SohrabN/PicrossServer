Index: src/PircrossServer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/PircrossServer.java b/src/PicrossServer.java
rename from src/PircrossServer.java
rename to src/PicrossServer.java
--- a/src/PircrossServer.java	(revision c732f62291912d0aa3825c2edd13e57b742babd2)
+++ b/src/PicrossServer.java	(date 1649476802029)
@@ -1,11 +1,10 @@
-
 import java.io.*;
 import java.net.*;
 import java.util.*;
 
-public class PircrossServer {
-    private static Vector<Client> clients = new Vector<Client>(); /*list of users on open ports*/
-    private static Vector<Thread> threads = new Vector<Thread>();
+public class PicrossServer {
+    private static final Vector<Client> clients = new Vector<Client>(); /*list of users on open ports*/
+    private static final Vector<Thread> threads = new Vector<Thread>();
     private static ServerSocket serverSocket;
 
     public static void main(String[] args) {
@@ -37,10 +36,8 @@
                 System.err.println("Proper Usage is: java <programName> <portNumber>");
                 System.exit(1);
             }
-            if (defaultPort)
-                System.out.println("Now listening to port: " + String.valueOf(defaultPortNum));
-            else
-                System.out.println("Now listening to port: " + args[0]);
+            if (defaultPort) System.out.println("Now listening to port: " + String.valueOf(defaultPortNum));
+            else System.out.println("Now listening to port: " + args[0]);
 
             while (true) {
 
@@ -49,8 +46,8 @@
                 Scanner in = new Scanner(inStream);
                 String userName = in.nextLine();
                 System.out.println("Inbound connection #" + count);
-                System.out.println(userName + " has connected.\n");
-                sendMessageToAll("SERVER: " + userName + "has joined the server");
+                System.out.println(userName + " has connected.");
+                sendMessageToAll("SERVER: " + userName + "has joined the server.");
                 Client newUser = new Client(clientSocket, userName);
                 clients.add(newUser);
                 count++;
@@ -65,9 +62,29 @@
 
     public static void sendMessageToAll(String message) {
         for (int i = 0; i < clients.size(); i++) {
-            clients.elementAt(i).sendMessage().println(clients);
+            clients.elementAt(i).getOutSteam().println(message);
         }
+
+    }
+    public static String sendClientsInfo(){
+        String str;
+
+        str="###################################\nCurrent Users Connected To Server\n###################################\n";
+        for (int i=0;i<clients.size();i++){
+            str=str+"User: "+(i+1)+"\tUser Name: "+clients.elementAt(0).getUserName();
+        }
+        return str;
+    }
+
+    public static boolean removeClient(Client client) {
+        if (clients.remove(client)) return true;
+        else return false;
+    }
 
+    public static void sendMessageToAllAboutClients() {
+        for (int i = 0; i < clients.size(); i++) {
+            clients.elementAt(i).getOutSteam().println(clients);
+        }
     }
 }
 
@@ -91,83 +108,68 @@
         this.userName = userName;
     }
 
-    /********************************************************************************
-     Function name:		changeName
-     purpose				change name of user
-     @version 1.0
-     @author Asim Jasarevic
-     ********************************************************************************/
-    public void changeName(String name) {
+    public PrintStream getOutSteam() {
+        return this.outSteam;
+    }
+    public String getUserName(){
+        return this.userName;
+    }
 
-        String preName = this.userName;
-        String parsedName = name;
-        parsedName = parsedName.replace("/name (", "");
-        parsedName = parsedName.replace(")", "");
 
-        this.userName = parsedName;
-        this.passMessage().println(preName + " name changed to " + parsedName);
+    public void changeName(String userName) {
+
+        String oldUserName = this.userName;
+        String NewUserName = userName;
+        NewUserName = NewUserName.replace("/name (", "");
+        NewUserName = NewUserName.replace(")", "");
+        this.userName = NewUserName;
+        outSteam.println(oldUserName + " renamed to " + NewUserName);
         //othelloServer.sendServerMessagesAway(parsedName + "has joined the server");
-        System.out.println(preName + " has been changed to " + parsedName);
-        return;
+        System.out.println(oldUserName + " renamed to " + NewUserName);
 
     }
+    public void sendHelp(){
+        outSteam.println("/help:this message\n/bye: disconnect\n/who: shows name of all connected players\n/name (name): Rename yourslef\n/get: gets the current challenge game.\n");
+    }
 
-    /********************************************************************************
-     Function name:		DisconnectUser
-     purpose				print out user has been diconected (kick action happens in run())
-     @version 1.0
-     @author Asim Jasarevic
-     ********************************************************************************/
     public void DisconnectUser() {
-
-        String preName = this.userName;
-        System.out.println(preName + " has disconnected");
-        return;
-
+        System.out.println(userName + " has disconnected");
     }
 
-    /********************************************************************************
-     Function name:		passMessage
-     purpose				get messages and pass it to gui
-     @version 1.0
-     @author Asim Jasarevic
-     ********************************************************************************/
-    public PrintStream sendMessage() {
-        return this.streamOut;
-    }
+    public void getGame(){
 
-    /********************************************************************************
-     Function name:		InputStream
-     purpose				get text in text field in gui
-     @version 1.0
-     @author Asim Jasarevic
-     ********************************************************************************/
-    public InputStream getTextField() {
-        return this.streamIn;
     }
 
-    /********************************************************************************
-     Function name:		getUsername
-     purpose				get username of user
-     @version 1.0
-     @author Asim Jasarevic
-     ********************************************************************************/
-    public String getUsername() {
-        return this.userName;
-    }
 
-    /********************************************************************************
-     Function name:		toString
-     purpose				print username besides message
-     @version 1.0
-     @author Asim Jasarevic
-     ********************************************************************************/
-    public String toString() {
-        return (this.getUsername());
-    }
 
     @Override
     public void run() {
+        String message;
+        Scanner scanner = new Scanner(inStream);
+
+        while (scanner.hasNextLine()) {
+            message = scanner.nextLine();
+            if(message.equals("/help")){
+                outSteam.println("/help:This message\n/bye: Disconnect\n/who: Shows name of all connected players\n/name (name): Rename yourself\n/get: Gets the current challenge game.\n/cls: Clears the console output.\n");
 
+            }else if(message.equals("/who")){
+                outSteam.println(PicrossServer.sendClientsInfo());
+            }
+            else if (message.contains("/name (") && message.contains(")")) {
+                changeName(message);
+            } else if(message.equals("/get")){
+                getGame();
+            }else if (message.equals("/bye")) {
+
+                DisconnectUser();
+                PicrossServer.removeClient(this);
+                PicrossServer.sendMessageToAllAboutClients();
+            } else {
+                PicrossServer.sendMessageToAll(userName + ": " + message);
+            }
+        }
+
+        PicrossServer.removeClient(this);
+        PicrossServer.sendMessageToAllAboutClients();
     }
 }
\ No newline at end of file
Index: .idea/uiDesigner.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/uiDesigner.xml b/.idea/uiDesigner.xml
new file mode 100644
--- /dev/null	(date 1649372192000)
+++ b/.idea/uiDesigner.xml	(date 1649372192000)
@@ -0,0 +1,124 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="Palette2">
+    <group name="Swing">
+      <item class="com.intellij.uiDesigner.HSpacer" tooltip-text="Horizontal Spacer" icon="/com/intellij/uiDesigner/icons/hspacer.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="1" hsize-policy="6" anchor="0" fill="1" />
+      </item>
+      <item class="com.intellij.uiDesigner.VSpacer" tooltip-text="Vertical Spacer" icon="/com/intellij/uiDesigner/icons/vspacer.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="1" anchor="0" fill="2" />
+      </item>
+      <item class="javax.swing.JPanel" icon="/com/intellij/uiDesigner/icons/panel.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3" />
+      </item>
+      <item class="javax.swing.JScrollPane" icon="/com/intellij/uiDesigner/icons/scrollPane.png" removable="false" auto-create-binding="false" can-attach-label="true">
+        <default-constraints vsize-policy="7" hsize-policy="7" anchor="0" fill="3" />
+      </item>
+      <item class="javax.swing.JButton" icon="/com/intellij/uiDesigner/icons/button.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="3" anchor="0" fill="1" />
+        <initial-values>
+          <property name="text" value="Button" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JRadioButton" icon="/com/intellij/uiDesigner/icons/radioButton.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="3" anchor="8" fill="0" />
+        <initial-values>
+          <property name="text" value="RadioButton" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JCheckBox" icon="/com/intellij/uiDesigner/icons/checkBox.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="3" anchor="8" fill="0" />
+        <initial-values>
+          <property name="text" value="CheckBox" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JLabel" icon="/com/intellij/uiDesigner/icons/label.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="0" anchor="8" fill="0" />
+        <initial-values>
+          <property name="text" value="Label" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JTextField" icon="/com/intellij/uiDesigner/icons/textField.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
+          <preferred-size width="150" height="-1" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JPasswordField" icon="/com/intellij/uiDesigner/icons/passwordField.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
+          <preferred-size width="150" height="-1" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JFormattedTextField" icon="/com/intellij/uiDesigner/icons/formattedTextField.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
+          <preferred-size width="150" height="-1" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTextArea" icon="/com/intellij/uiDesigner/icons/textArea.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTextPane" icon="/com/intellij/uiDesigner/icons/textPane.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JEditorPane" icon="/com/intellij/uiDesigner/icons/editorPane.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JComboBox" icon="/com/intellij/uiDesigner/icons/comboBox.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="2" anchor="8" fill="1" />
+      </item>
+      <item class="javax.swing.JTable" icon="/com/intellij/uiDesigner/icons/table.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JList" icon="/com/intellij/uiDesigner/icons/list.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="2" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTree" icon="/com/intellij/uiDesigner/icons/tree.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTabbedPane" icon="/com/intellij/uiDesigner/icons/tabbedPane.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3">
+          <preferred-size width="200" height="200" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JSplitPane" icon="/com/intellij/uiDesigner/icons/splitPane.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3">
+          <preferred-size width="200" height="200" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JSpinner" icon="/com/intellij/uiDesigner/icons/spinner.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1" />
+      </item>
+      <item class="javax.swing.JSlider" icon="/com/intellij/uiDesigner/icons/slider.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1" />
+      </item>
+      <item class="javax.swing.JSeparator" icon="/com/intellij/uiDesigner/icons/separator.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3" />
+      </item>
+      <item class="javax.swing.JProgressBar" icon="/com/intellij/uiDesigner/icons/progressbar.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="0" fill="1" />
+      </item>
+      <item class="javax.swing.JToolBar" icon="/com/intellij/uiDesigner/icons/toolbar.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="0" fill="1">
+          <preferred-size width="-1" height="20" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JToolBar$Separator" icon="/com/intellij/uiDesigner/icons/toolbarSeparator.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="0" anchor="0" fill="1" />
+      </item>
+      <item class="javax.swing.JScrollBar" icon="/com/intellij/uiDesigner/icons/scrollbar.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="0" anchor="0" fill="2" />
+      </item>
+    </group>
+  </component>
+</project>
\ No newline at end of file
